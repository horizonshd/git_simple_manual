/**
 * =================================
 * @Author:   horizonshd
 * @Version:  1.0
 * @DateTime: 2017-08-17 13:45:17
 * =================================
 */


┌─── git 基础指令[本地]
│       ├───01:git init             ────将当前文件夹初始化为git仓库
│       ├───02:git status           ────查看当前 git 仓库的一些状态
│       ├───03:git add              ────将文件添加到「暂存区」
│       ├───04:git commit           ────将「暂存区」中的文件提交到git仓库中
│       ├───05:git log              ────查看所有产生的 commit 记录
│       ├───06:git branch           ────查看本地当前分支列表
│       ├───07:git branch a         ────新建了一个名字叫 a 的分支
│       ├───08:git checkout a       ────切换到 a 分支
│       ├───09:git checkout -b c    ────创建新的分支c并切换到分支c
│       ├───10:git merge a          ────将分支a合并到master分支，了解和git rebase a 的区别
│       ├───11:git branch -d a      ────删除分支a,前提是分支a已经合并到master分支
│       ├───12:git branch -D a      ────强制删除分支a
│       ├───13:git tag v1.0         ────在当前代码状态下新建了一个v1.0的标签
│       └───14:git tag              ────查看历史 tag 记录
│
├───向 GitHub 提交代码
│       ├───15:ssh-keygen -t ras                ────在GitBash终端下生成SSH key
│       ├───16:git push origin master           ────如果本地代码有更新，把本地代码推到远程仓库，使本地仓库跟远程仓库保持同步
│       ├───17:git pull origin master           ────如果别人提交代码到远程仓库，把远程仓库的最新代码拉下来，保证两端代码的同步，最好先pull再push，避免冲突
│       ├───18:git clone 项目地址               ────把项目 clone 到本地，在本地修改或者添加文件，然后进行 commit，再通过git push origin master进行代码提交
│       ├───19:git remote add origin 项目地址   ────把本地项目与 GitHub 上的项目进行关联，先在 github 创建一个项目，git remote rm origin，再git push origin master向远程仓库进行代码提交
│       └───20:git remote -v                    ────查看我们当前项目有哪些远程仓库
│
├───Git 进阶 [配置文件：~/.gitconfig]
│       ├───21:git config [--global] user.name "username"           ────[全局配置]设置用户名
│       ├───22:git git config [--global] user.email "email"         ────[全局配置]设置邮箱
│       ├───23:git config --global alias.别名 checkout              ────配置别名
│       ├───24:git config --global alias.psm 'push origin master'   ────配置别名组合
│       ├───25:git config --global core.editor "vim"                ────设置 git 用的编辑器为vim
│       ├───26:git config --global color.ui true                    ────开启给 Git 着色
│       ├───27:git config -l                                        ────查看 git 的配置信息
│       ├───28:diff --git a/a.md b/b.md                             ────比较文件的改动
│       ├───29:git diff                                             ────只能比较当前文件和暂存区文件差异，就是还没有执行 git add 的文件
│       ├───30:git diff <$id1> <$id2>                               ────比较两次提交之间的差异
│       ├───31:git diff <branch1>..<branch2>                        ────在两个分支之间比较
│       ├───32:git diff --staged                                    ────比较暂存区和版本库差异
│       ├───33:git checkout master                                  ────切换分支
│       ├───34:git checkout v1.0                                    ────切换tag
│       ├───35:git checkout commit_id                               ────切换到某次commit
│       ├───36:git checkout filename                                ────撤销还没有 add 进暂存区的文件
│       ├───37:git stash                                            ────把当前分支所有没有 commit 的代码先暂存起来，这个时候再执行 git status 会发现当前分支很干净
│       ├───38:git stash list                                       ────查看暂存区的记录
│       ├───39:git stash apply                                      ────把暂存区的代码还原
│       ├───40:git stash drop [stash_id]                            ────把暂存区的这次 stash 记录删除
│       ├───41:git stash pop                                        ────git stash apply + git stash drop
│       └───42:git stash clear                                      ────清空所有暂存区的记录
│
├───Git 分支管理
│       ├───43:git push origin develop                      ────把名为 develop 的分支推送到远程仓库
│       ├───44:git push origin develop:develop2             ────把名为 develop 的分支推送到远程仓库，并把远程的分支取名叫 develop2
│       ├───45:git branch -r                                ────查看远程分支列表
│       ├───46:git push origin :develop                     ────删除远程分支
│       ├───47:git checkout develop origin/develop          ────如果远程分支有个 develop ，而本地没有，你想把远程的 develop 分支迁到本地
│       └───48:git checkout -b develop origin/develop       ────同样的把远程分支迁到本地顺便切换到该分支
│
└───分支管理流程 Git Flow[以下操作需要有Git Flow]
        ├───49:git flow feature start A         ────第一步切换到 develop 分支，第二步新建一个以 feature 开头的分支名
        └───50:git flow feature finish A        ────这个分支完成之后，需要合并到 develop 分支
